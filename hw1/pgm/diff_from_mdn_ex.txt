This is the result of running
diff main.js ../webgl-demo.js
where main.js is my file and
../webgl-demo.js is the unediting mdn example

1,4c1
< var yRotation = 0.0;
< var xRotation = 0.0;
< 
< 
---
> var cubeRotation = 0.0;
69,121c66,68
<   // This will handle the pgm file once it is loaded
<   function reqListener () {
<     // 2d array that will hold the data from the pgm
<     let pgmArray = [];
< 
<     let lines = this.responseText.split('\n')
<     // get width and length from 3rd line
<     let widthlength = lines[2].split(' ');
<     let pgmWidth = parseInt(widthlength[0]);
<     let pgmLength = parseInt(widthlength[1]);
<     // get Max Height
<     let pgmMaxHeight = parseInt(lines[3]);
< 
<     // loop through the lines
<     for(let j = 4; j < lines.length-1; j++){
<       let entries = lines[j].split(/\s+/);
<       // converts entries to ints
<       let row = [];
<       for(let k = 1; k < entries.length; k++){
<         row = row.concat(parseInt(entries[k]));
<       }
<       // add row to array 
<       pgmArray = pgmArray.concat([row]);
<     }
<       
<     // now that the pgm data is loaded, we can set up the rest of the scene
< 
<     // Here's where we call the routine that builds all the
<     // objects we'll be drawing.
<     let buffers = initBuffers(gl, pgmArray, pgmWidth, pgmLength);
< 
<     // this lets the arrow keys rotate the object
<     drawScene(gl, programInfo, buffers, 0.0, 0.0);
<     document.addEventListener('keydown', function rotateHandler(e){
<       xChange = 0.0;
<       yChange = 0.0;
<       switch (e.keyCode) {
<         case 37: // left
<           xChange = -0.1;
<           break;
<         case 38: // up
<           yChange = -0.1;
<           break;
<         case 39: // right
<           xChange = 0.1;
<           break;
<         case 40: // down
<           yChange = 0.1;
<           break;
<       }
<       drawScene(gl, programInfo, buffers, xChange, yChange);
<     }); 
<   }
---
>   // Here's where we call the routine that builds all the
>   // objects we'll be drawing.
>   const buffers = initBuffers(gl);
123,127c70
<   // get pgm file
<   var oReq = new XMLHttpRequest();
<   oReq.addEventListener("load", reqListener);
<   oReq.open("GET", "1979.pgm");
<   oReq.send();
---
>   var then = 0;
128a72,76
>   // Draw the scene repeatedly
>   function render(now) {
>     now *= 0.001;  // convert to seconds
>     const deltaTime = now - then;
>     then = now;
129a78
>     drawScene(gl, programInfo, buffers, deltaTime);
130a80,82
>     requestAnimationFrame(render);
>   }
>   requestAnimationFrame(render);
137c89
< // have one object -- a simple three-dimensional cylinder.
---
> // have one object -- a simple three-dimensional cube.
139c91
< function initBuffers(gl, pgmArray, pgmWidth, pgmLength) {
---
> function initBuffers(gl) {
141c93
<   // Create a buffer for the cylinder's vertex positions.
---
>   // Create a buffer for the cube's vertex positions.
150,159c102
<   // Now create an array of positions from the pgm.
< 
<   let positions = [];
<   // the x and z of a point will be it's row and column in the array
<   // the y will be the height at that point in the array
<   for (let j = 0; j < pgmArray.length; j++){
<     for (let k = 0; k < pgmArray[j].length; k++){
<       positions = positions.concat(j, pgmArray[j][k]/4, k); 
<     }
<   }
---
>   // Now create an array of positions for the cube.
160a104,140
>   const positions = [
>     // Front face
>     -1.0, -1.0,  1.0,
>      1.0, -1.0,  1.0,
>      1.0,  1.0,  1.0,
>     -1.0,  1.0,  1.0,
> 
>     // Back face
>     -1.0, -1.0, -1.0,
>     -1.0,  1.0, -1.0,
>      1.0,  1.0, -1.0,
>      1.0, -1.0, -1.0,
> 
>     // Top face
>     -1.0,  1.0, -1.0,
>     -1.0,  1.0,  1.0,
>      1.0,  1.0,  1.0,
>      1.0,  1.0, -1.0,
> 
>     // Bottom face
>     -1.0, -1.0, -1.0,
>      1.0, -1.0, -1.0,
>      1.0, -1.0,  1.0,
>     -1.0, -1.0,  1.0,
> 
>     // Right face
>      1.0, -1.0, -1.0,
>      1.0,  1.0, -1.0,
>      1.0,  1.0,  1.0,
>      1.0, -1.0,  1.0,
> 
>     // Left face
>     -1.0, -1.0, -1.0,
>     -1.0, -1.0,  1.0,
>     -1.0,  1.0,  1.0,
>     -1.0,  1.0, -1.0,
>   ];
168,204d147
<   // Build the element array buffer; this specifies the indices
<   // into the vertex arrays for each face's vertices.
< 
<   const indexBuffer = gl.createBuffer();
<   gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
< 
<   let indices = [];
< 
<   // number of vertices defined by the array 'positions'
<   let points = positions.length / 3; 
< 
<   // each point will connect to the eight points around it with 8 triangles
<   // but for each 'j' we will just define the two triangles to the top left 
<   // of the point
<   for (let j = 0; j < points; j++){
<     // I'll refer to 'j' as the point at index j
<     // if not on the left column
<     if (j % pgmWidth != 0){
<       // if not on the first row
<       if (j > pgmWidth){
<         // this adds two triangles,
<         // one is between the point above j and the point to the top left of j
<         // the other is between the top left one and the left one
<         indices = indices.concat(j, j - pgmWidth, (j - pgmWidth) - 1, 
<                                  j, j - 1,        (j - pgmWidth) - 1);
<       }
<     }
<   }
< 
<   console.log(positions)
< 
<   // Now send the element array to GL
< 
<   gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,
<       new Uint16Array(indices), gl.STATIC_DRAW);
< 
< 
208,209d150
<   // each face will be one of two colors and we'll alternate for each face
< 
211,212c152,157
<     [0.0,  0.0,  1.0,  1.0],    // first color: blue
<     [1.0,  1.0,  1.0,  1.0],    // second color: white
---
>     [1.0,  1.0,  1.0,  1.0],    // Front face: white
>     [1.0,  0.0,  0.0,  1.0],    // Back face: red
>     [0.0,  1.0,  0.0,  1.0],    // Top face: green
>     [0.0,  0.0,  1.0,  1.0],    // Bottom face: blue
>     [1.0,  1.0,  0.0,  1.0],    // Right face: yellow
>     [1.0,  0.0,  1.0,  1.0],    // Left face: purple
219,220c164,165
<   for (var j = 0; j < (positions.length / 3); ++j) {
<     const c = faceColors[j % 2];
---
>   for (var j = 0; j < faceColors.length; ++j) {
>     const c = faceColors[j];
222,223c167,168
<     // Repeat each color three times for the three vertices of the face
<     colors = colors.concat(c, c, c);
---
>     // Repeat each color four times for the four vertices of the face
>     colors = colors.concat(c, c, c, c);
229a175,197
>   // Build the element array buffer; this specifies the indices
>   // into the vertex arrays for each face's vertices.
> 
>   const indexBuffer = gl.createBuffer();
>   gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
> 
>   // This array defines each face as two triangles, using the
>   // indices into the vertex array to specify each triangle's
>   // position.
> 
>   const indices = [
>     0,  1,  2,      0,  2,  3,    // front
>     4,  5,  6,      4,  6,  7,    // back
>     8,  9,  10,     8,  10, 11,   // top
>     12, 13, 14,     12, 14, 15,   // bottom
>     16, 17, 18,     16, 18, 19,   // right
>     20, 21, 22,     20, 22, 23,   // left
>   ];
> 
>   // Now send the element array to GL
> 
>   gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,
>       new Uint16Array(indices), gl.STATIC_DRAW);
235d202
<     vertices: indices.length,
242,246c209
< function drawScene(gl, programInfo, buffers, xChange, yChange) {
<   // Update the rotation
<   yRotation += yChange;
<   xRotation += xChange;
< 
---
> function drawScene(gl, programInfo, buffers, deltaTime) {
265,266c228,229
<   const zNear = 1.0;
<   const zFar = 255.0;
---
>   const zNear = 0.1;
>   const zFar = 100.0;
286c249
<                  [-0.0, 0.0, -128.0]);  // amount to translate
---
>                  [-0.0, 0.0, -6.0]);  // amount to translate
289,290c252,253
<               yRotation,        // amount to rotate in radians
<               [1, 0, 0]);       // axis to rotate around (Y)
---
>               cubeRotation,     // amount to rotate in radians
>               [0, 0, 1]);       // axis to rotate around (Z)
293c256
<               xRotation,// amount to rotate in radians
---
>               cubeRotation * .7,// amount to rotate in radians
355c318
<     const vertexCount = buffers.vertices; // get vertex count from buffers
---
>     const vertexCount = 36;
360a324,326
>   // Update the rotation for the next draw
> 
>   cubeRotation += deltaTime;
