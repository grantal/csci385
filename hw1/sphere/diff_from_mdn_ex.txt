This is the result of running
diff main.js ../webgl-demo.js
where main.js is my file and
../webgl-demo.js is the unediting mdn example

1,2c1
< var yRotation = 0.0;
< var xRotation = 0.0;
---
> var cubeRotation = 0.0;
69c68
<   let buffers = initBuffers(gl, 8);
---
>   const buffers = initBuffers(gl);
71,91c70
<   // this lets the arrow keys rotate the object
<   drawScene(gl, programInfo, buffers, 0.0, 0.0);
<   document.addEventListener('keydown', function rotateHandler(e){
<     xChange = 0.0;
<     yChange = 0.0;
<     switch (e.keyCode) {
<       case 37: // left
<         xChange = -0.1;
<         break;
<       case 38: // up
<         yChange = -0.1;
<         break;
<       case 39: // right
<         xChange = 0.1;
<         break;
<       case 40: // down
<         yChange = 0.1;
<         break;
<     }
<     drawScene(gl, programInfo, buffers, xChange, yChange);
<   }); 
---
>   var then = 0;
93,112c72,78
<   // this makes it so that the slider adjusts the fineness
<   const slider = document.querySelector('#numSides');
<   const span = document.querySelector('#sideSpan');
<   // this gets it to display the number by the slider
<   let sliderMouseDown = false;
<   slider.addEventListener('mousedown', function sliderMouseDownListener(e){
<     sliderMouseDown = true;
<   });
<   slider.addEventListener('mousemove', function sliderMouseDownListener(e){
<     if (sliderMouseDown) {
<       span.innerHTML = e.target.value;
<     }
<   });
<   // heres where it actually rerenders
<   slider.addEventListener('mouseup', function sliderReRender(e){
<     sliderMouseDown = false;
<     numSides = Number(e.target.value);
<     buffers = initBuffers(gl, numSides);
<     drawScene(gl, programInfo, buffers, 0.0, 0.0);
<   });
---
>   // Draw the scene repeatedly
>   function render(now) {
>     now *= 0.001;  // convert to seconds
>     const deltaTime = now - then;
>     then = now;
> 
>     drawScene(gl, programInfo, buffers, deltaTime);
113a80,82
>     requestAnimationFrame(render);
>   }
>   requestAnimationFrame(render);
120c89
< // have one object -- a simple three-dimensional cylinder.
---
> // have one object -- a simple three-dimensional cube.
122c91
< function initBuffers(gl, numSides) {
---
> function initBuffers(gl) {
124c93
<   // Create a buffer for the cylinder's vertex positions.
---
>   // Create a buffer for the cube's vertex positions.
133,135c102
<   // Now create an array of positions for the cylinder.
< 
<   let positions = [];
---
>   // Now create an array of positions for the cube.
137,151c104,140
<   // This generates the positions of the sphere
<   // I use spherical coordinates and just increment theta and phi
<   // and use those to calculate the x,y and z of the surface of the
<   // sphere
<   for (let j = 0; j < numSides; j++){
<     let theta = (j/numSides)*2*Math.PI;
<     for (let k = 0; k <= numSides; k++){
<       let phi = (k/numSides)*Math.PI;
<       let newx = Math.sin(phi)*Math.cos(theta); 
<       let newy = Math.sin(phi)*Math.sin(theta); 
<       let newz = Math.cos(phi); 
<       // add this point of the sphere to postions
<       positions = positions.concat(newx, newy, newz);
<     }
<   }
---
>   const positions = [
>     // Front face
>     -1.0, -1.0,  1.0,
>      1.0, -1.0,  1.0,
>      1.0,  1.0,  1.0,
>     -1.0,  1.0,  1.0,
> 
>     // Back face
>     -1.0, -1.0, -1.0,
>     -1.0,  1.0, -1.0,
>      1.0,  1.0, -1.0,
>      1.0, -1.0, -1.0,
> 
>     // Top face
>     -1.0,  1.0, -1.0,
>     -1.0,  1.0,  1.0,
>      1.0,  1.0,  1.0,
>      1.0,  1.0, -1.0,
> 
>     // Bottom face
>     -1.0, -1.0, -1.0,
>      1.0, -1.0, -1.0,
>      1.0, -1.0,  1.0,
>     -1.0, -1.0,  1.0,
> 
>     // Right face
>      1.0, -1.0, -1.0,
>      1.0,  1.0, -1.0,
>      1.0,  1.0,  1.0,
>      1.0, -1.0,  1.0,
> 
>     // Left face
>     -1.0, -1.0, -1.0,
>     -1.0, -1.0,  1.0,
>     -1.0,  1.0,  1.0,
>     -1.0,  1.0, -1.0,
>   ];
159,191d147
<   // Build the element array buffer; this specifies the indices
<   // into the vertex arrays for each face's vertices.
< 
<   const indexBuffer = gl.createBuffer();
<   gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
< 
<   // This array defines each face as two triangles, using the
<   // indices into the vertex array to specify each triangle's
<   // position.
< 
<   let indices = [];
< 
<   // The positons list is broken up into groups of vertices of size numSides + 1 where
<   // each group represents a single arc along the sphere
<   // this function makes triangles out of those vertices
<   let verts = positions.length / 3; 
<   for (var j = 0; j < ((positions.length / 3) - 0); ++j) {
<     // if the point is not the bottom of an arc
<     if (j % (numSides + 1) != 0){
<       // two triangles per point
<       indices = indices.concat(j, j - 1, ((j-1) + numSides) % verts);
<       indices = indices.concat(j, (j + numSides) % verts, ((j-1) + numSides) % verts);
<     }
<   }
< 
< 
<   
<   // Now send the element array to GL
< 
<   gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,
<       new Uint16Array(indices), gl.STATIC_DRAW);
< 
< 
195,196d150
<   // each face will be one of two colors and we'll alternate for each face
< 
198,199c152,157
<     [0.0,  0.0,  1.0,  1.0],    // first color: blue
<     [0.0,  1.0,  0.0,  1.0],    // second color: green
---
>     [1.0,  1.0,  1.0,  1.0],    // Front face: white
>     [1.0,  0.0,  0.0,  1.0],    // Back face: red
>     [0.0,  1.0,  0.0,  1.0],    // Top face: green
>     [0.0,  0.0,  1.0,  1.0],    // Bottom face: blue
>     [1.0,  1.0,  0.0,  1.0],    // Right face: yellow
>     [1.0,  0.0,  1.0,  1.0],    // Left face: purple
206,207c164,165
<   for (var j = 0; j < (positions.length / 3); ++j) {
<     const c = faceColors[j % 2];
---
>   for (var j = 0; j < faceColors.length; ++j) {
>     const c = faceColors[j];
209,210c167,168
<     // Repeat each color three times for the three vertices of the face
<     colors = colors.concat(c, c, c);
---
>     // Repeat each color four times for the four vertices of the face
>     colors = colors.concat(c, c, c, c);
216a175,197
>   // Build the element array buffer; this specifies the indices
>   // into the vertex arrays for each face's vertices.
> 
>   const indexBuffer = gl.createBuffer();
>   gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
> 
>   // This array defines each face as two triangles, using the
>   // indices into the vertex array to specify each triangle's
>   // position.
> 
>   const indices = [
>     0,  1,  2,      0,  2,  3,    // front
>     4,  5,  6,      4,  6,  7,    // back
>     8,  9,  10,     8,  10, 11,   // top
>     12, 13, 14,     12, 14, 15,   // bottom
>     16, 17, 18,     16, 18, 19,   // right
>     20, 21, 22,     20, 22, 23,   // left
>   ];
> 
>   // Now send the element array to GL
> 
>   gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,
>       new Uint16Array(indices), gl.STATIC_DRAW);
222d202
<     vertices: indices.length,
229,233c209
< function drawScene(gl, programInfo, buffers, xChange, yChange) {
<   // Update the rotation
<   yRotation += yChange;
<   xRotation += xChange;
< 
---
> function drawScene(gl, programInfo, buffers, deltaTime) {
276,277c252,253
<               yRotation,        // amount to rotate in radians
<               [1, 0, 0]);       // axis to rotate around (Y)
---
>               cubeRotation,     // amount to rotate in radians
>               [0, 0, 1]);       // axis to rotate around (Z)
280c256
<               xRotation,// amount to rotate in radians
---
>               cubeRotation * .7,// amount to rotate in radians
342c318
<     const vertexCount = buffers.vertices; // get vertex count from buffers
---
>     const vertexCount = 36;
347a324,326
>   // Update the rotation for the next draw
> 
>   cubeRotation += deltaTime;
